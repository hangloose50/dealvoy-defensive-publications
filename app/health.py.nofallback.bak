import os
import gspread
from dotenv import load_dotenv, set_key
from oauth2client.service_account import ServiceAccountCredentials
from gspread.exceptions import SpreadsheetNotFound, WorksheetNotFound

load_dotenv()

CRED_PATH        = os.getenv("GOOGLE_CREDS_PATH", "credentials.json")
AUTO_SHEET_TITLE = os.getenv("AUTO_SHEET_TITLE", "SourcingMasterSheet_Auto")
OWNER_EMAIL      = os.getenv("OWNER_EMAIL")
SCOPES = [
    "https://www.googleapis.com/auth/spreadsheets",
    "https://www.googleapis.com/auth/drive"
]

def create_and_share_sheet(title: str) -> str:
    creds = ServiceAccountCredentials.from_json_keyfile_name(CRED_PATH, SCOPES)
    gc = gspread.authorize(creds)
    print(f"→ Creating new sheet titled '{title}'")
    sh = gc.create(title)
    print(f"→ Sharing sheet with {OWNER_EMAIL}")
    sh.share(OWNER_EMAIL, perm_type="user", role="writer")
    return sh.id

def ensure_sheet_tabs(sh, tabs: dict):
    existing = {ws.title for ws in sh.worksheets()}
    for name, headers in tabs.items():
        if name in existing:
            print(f"→ Found '{name}' sheet")
        else:
            print(f"→ Creating '{name}' sheet")
            ws = sh.add_worksheet(title=name, rows="100", cols=str(len(headers)))
            if headers:
                ws.append_row(headers)

def init_dashboard():
    creds = ServiceAccountCredentials.from_json_keyfile_name(CRED_PATH, SCOPES)
    gc = gspread.authorize(creds)
    sheet_id = os.getenv("SPREADSHEET_ID")
    print(f"► Opening sheet ID: {sheet_id}")
    try:
        sh = gc.open_by_key(sheet_id)
    except SpreadsheetNotFound:
        new_id = create_and_share_sheet(AUTO_SHEET_TITLE)
        set_key(".env", "SPREADSHEET_ID", new_id)
        os.environ["SPREADSHEET_ID"] = new_id
        sh = gc.open_by_key(new_id)
        print(f"✅ Created and connected to new sheet: {new_id}")
    else:
        print(f"✅ Connected to existing sheet: {sh.title}")

    ws = sh.get_worksheet(0)
    headers = ws.row_values(1)
    if not headers:
        print("→ Adding header row")
        ws.append_row(["timestamp", "upc", "price", "roi"])
    else:
        print(f"→ Header exists: {headers}")

    tabs = {
        "Amazon":         ["timestamp", "asin", "price", "prime_eligible", "url"],
        "Walmart":        ["timestamp", "upc", "price", "stock", "url"],
        "Target":         ["timestamp", "upc", "price", "availability", "url"],
        "Kohls":          ["timestamp", "upc", "price", "discount", "url"],
        "eBay":           ["timestamp", "item_id", "price", "condition", "url"],
        "BestBuy":        ["timestamp", "sku", "price", "in_stock", "url"],
        "Newegg":         ["timestamp", "upc", "price", "availability", "url"],
        "Costco":         ["timestamp", "upc", "price", "membership_req", "url"],
        "HomeDepot":      ["timestamp", "upc", "price", "in_stock", "url"],
        "Lowe's":         ["timestamp", "upc", "price", "availability", "url"],
        "Overstock":      ["timestamp", "upc", "price", "stock", "url"],
        "Wayfair":        ["timestamp", "upc", "price", "stock", "url"],
        "PuzzleWarehouse":["timestamp", "upc", "price", "stock", "link"],
        "RoundEyeSupply": ["timestamp", "upc", "price", "availability", "link"],
        "EmpireDiscount": ["timestamp", "upc", "price", "rank", "link"],
        "EverestToys":    ["timestamp", "upc", "price", "stock", "link"],
        "DollarDays":     ["timestamp", "upc", "price", "link"],
        "PriceMaster":    ["timestamp", "upc", "price", "adder_fee", "link"],
        "FrontierCoop":   ["timestamp", "upc", "price", "min_order_qty", "link"],
        "DandHSales":     ["timestamp", "upc", "price", "shipping_time", "link"],
        "EEDistribution": ["timestamp", "upc", "price", "case_pack", "link"],
        "Alibaba":        ["timestamp", "upc", "price", "moq", "link"],
        "DHGate":         ["timestamp", "upc", "price", "moq", "link"]
    }
    ensure_sheet_tabs(sh, tabs)
    return gc, sh
